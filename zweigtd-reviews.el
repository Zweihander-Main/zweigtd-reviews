;;; zweigtd-reviews.el --- WIP-*-lexical-binding:t-*-

;; Copyright (C) 2021, Zweihänder <zweidev@zweihander.me>
;;
;; Author: Zweihänder
;; Keywords: org-mode
;; Homepage: https://github.com/Zweihander-Main/zweigtd-reviews
;; Version: 0.0.1

;; This file is not part of GNU Emacs.

;;; License:

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as published
;; by the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:
;;
;; WIP
;;
;;; Code:

(require 'org)
(require 'org-capture) ;; TODO: you sure?
(require 'org-agenda)
(require 'zweigtd-goals)
;; (require 'org-ql) ;; TODO: elsa problems

(defgroup zweigtd-reviews nil
  "Customization for 'zweigtd-reviews' package."
  :group 'org
  :prefix "zweigtd-reviews-")


(defvar zweigtd-reviews--current-working-date '(1 1 1900)
  "Current date being used by org-capture for generating reviews. Usually
generated by calendar-read-date. List in (month day year) format.")

(defvar zweigtd-reviews-non-goals-string "OTHER"
  "")

(defun zweigtd-reviews--goal-to-todo-string (goal)
  "Return GOAL priority in the format:
priority by yyyy-mm-dd
Will return \"\" if goal is \"OTHER\"."
  (if (string= goal zweigtd-reviews-non-goals-string)
      ""
    (let ((priority (substring-no-properties
                     (zweigtd-goals-get-prop goal :priority)))
          (schedule (zweigtd-goals-get-prop goal :schedule))
          (deadline (zweigtd-goals-get-prop goal :deadline)))
      (cond (deadline (concat priority
                              " by "
                              (format-time-string "%Y-%m-%d" deadline)))
            (schedule (concat priority
                              " beginning "
                              (format-time-string "%Y-%m-%d" schedule)))
            (t priority)))))

(defun zweigtd-reviews--num-goals-completed (goal orgql-date-predicate)
  "Return number of GOAL todos completed in ORGQL-DATE-PREDICATE.
Will return non-goal todo num if goal is \"OTHER\"."
  (let ((match
         (if (string= goal zweigtd-reviews-non-goals-string)
             `(not (tags ,@(zweigtd-goals-get-goals))) ;; TODO potential bug
           `(tags ,goal))))
    (length
     (org-ql-query
       :from (org-agenda-files t t)
       :where `(and (closed ,@orgql-date-predicate)
                    ,match)))))

(defun zweigtd-reviews--daily-review-string ()
  "Return the daily review agenda string."
  (save-window-excursion
    (org-agenda nil "x2")
    (progn (string-trim (buffer-string)))))

(defun zweigtd-reviews--date-to-time (date)
  "Takes DATE from calendar-read-date and outputs time string digestible by
parse-time-string."
  (let ((year (calendar-extract-year date))
        (month (calendar-extract-month date))
        (day (calendar-extract-day date)))
    (concat (number-to-string day)
            " "
            (calendar-month-name month t)
            " "
            (number-to-string year))))

(defun zweigtd-reviews--prompt-week-number ()
  ""
  (interactive)
  (let* ((today (calendar-current-date))
         (day-of-week (calendar-day-of-week today)) ; 0 is sun
         (abs-days (calendar-absolute-from-gregorian today))
         (abs-start (- abs-days day-of-week -1)) ; iso starts on mon
         (iso-date-today (calendar-iso-from-absolute abs-start))
         (abs-end (+ abs-start 7))
         (collection '()))
    (let ((counter 104) ; 52 weeks before, 52 weeks after
          (counter-abs-days (- abs-start (* 52 7))) ; start 52 weeks back
          (counter-iso-date-start))
      (while (> counter 0)
        (setq counter-iso-date-start
              (calendar-iso-from-absolute counter-abs-days))
        (push (cons (concat (format "W%02d" (nth 0 counter-iso-date-start))
                            ", "
                            (number-to-string (nth 2 counter-iso-date-start))
                            " | "
                            (zweigtd-reviews--date-to-time
                             (calendar-gregorian-from-absolute counter-abs-days))
                            " - "
                            (zweigtd-reviews--date-to-time
                             (calendar-gregorian-from-absolute
                              (+ counter-abs-days 6))))
                    counter-iso-date-start)
              collection)
        (setq counter-abs-days (+ counter-abs-days 7))
        (setq counter (1- counter))))
    (assoc (completing-read
            "Select which week: "
            (reverse collection)
            nil
            t
            nil
            nil
            (nth 52 collection)) ; Week just before this one
           collection)
    ;; NEXT: Get the cdr, throw it into abs-from-iso and grego-from-abs
    ;; You will then have the week num (nth 0), and the start date in whatever format
    ;; The datetree has a function for week, figure it out, figure out what it wants
    ;; Then implement it, clean up reviews so it uses that
    ;; Then port over the monthly code and generally copy that
    ;; This function is just for prompt, copy the monthly one for the rest
    ))

(defun zweigtd-reviews--weekly-review-string (questions-string)
  "Takes a string QUESTIONS-STRING and outputs a string consisting of the
agenda divided by goal."
  (let ((agenda-strings '()))
    (maphash
     (lambda (tag v)
       (let ((numkey (plist-get v 'numkey)))
         (push
          (save-window-excursion
            (org-agenda nil (concat "xw" (char-to-string numkey)))
            (progn (string-trim (buffer-string))))
          agenda-strings)))
     zweigtd-goals--hashtable)
    (push
     (save-window-excursion
       (org-agenda nil "xw0")
       (progn (string-trim (buffer-string))))
     agenda-strings)
    (setq agenda-strings (reverse agenda-strings))
    (string-join
     (mapcar
      (lambda (tag)
        (let ((agenda-string (car agenda-strings)))
          (setq agenda-strings (cdr agenda-strings))
          (concat "*** "
                  tag
                  "\n"
                  agenda-string
                  "\n*Focus:* _"
                  (zweigtd-reviews--goal-to-todo-string tag)
                  "_\n===\n"
                  questions-string)))
      (nconc (zweigtd-goals-get-goals)
             (list "OTHER"))))))

(defun zweigtd-reviews--month-to-orgql (date)
  "Takes a DATE from calendar-read-date and outputs date-time predicate
covering whole month of that DATE for use in org-ql."
  (let* ((month (calendar-extract-month date))
         (year (calendar-extract-year date))
         (from-time (zweigtd-reviews--date-to-time date))
         (last-day (calendar-last-day-of-month month year))
         (to-time (zweigtd-reviews--date-to-time (list month last-day year))))
    `(:from ,from-time :to ,to-time)))

(defun zweigtd-reviews--monthly-review-string (questions-string)
  "Takes a string QUESTIONS-STRING and outputs a string consisting of the
goals and items accomplished divided by goal."
  (string-join
   (mapcar
    (lambda (tag)
      (concat "* "
              tag
              "\n*DONE:* "
              (number-to-string (zweigtd-reviews--num-goals-completed
                                 tag
                                 (zweigtd-reviews--month-to-orgql
                                  zweigtd-reviews--current-working-date)))
              "\n*Focus:* _"
              (zweigtd-reviews--goal-to-todo-string tag)
              "_\n-----\n"
              questions-string))
    (zweigtd-goals-get-goals))))

(defun zweigtd-reviews--position-monthly-template ()
  "Will prompt for a year/month and create+goto a datetree for montly tree.
To be used in org-capture-template as the position function."
  (setq zweigtd-reviews--current-working-date (calendar-read-date t))
  (let ((marker (org-find-olp
                 (cons
                  (org-capture-expand-file zwei/org-agenda-reviews-file)
                  (list "Monthly Reviews")))))
    (set-buffer (marker-buffer marker))
    (widen)
    (goto-char marker)
    (set-marker marker nil)
    (require 'org-datetree)
    (org-datetree-find-month-create
     zweigtd-reviews--current-working-date
     'subtree-at-point)))

(defun zweigtd-reviews--generate-monthly-template ()
  "Will parse the monthly template and feed it to org-capture-fill-template.
To be used in org-capture-template as the template function."
  (org-capture-fill-template (org-file-contents
                              zwei/org-agenda-monthly-review-template-file)))

(provide 'zweigtd-reviews)

;; Local Variables:
;; coding: utf-8
;; End:

;;; zweigtd-reviews.el ends here
